
R : Copyright 2005, The R Foundation for Statistical Computing
Version 2.2.1 beta (2005-12-18 r36792)
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###################################################
> ### chunk number 1: setup
> ###################################################
> rm(list = ls())
> if (!file.exists("tables")) dir.create("tables")
> set.seed(290875)
> options(prompt = "R> ", width = 63, # digits = 4,
+     SweaveHooks = list(leftpar = function()
+         par(mai = par("mai") * c(1, 1.05, 1, 1))))
R> HSAURpkg <- require("HSAUR")
Loading required package: HSAUR
Loading required package: lattice
Loading required package: MASS
Loading required package: scatterplot3d
R> if (!HSAURpkg) stop("cannot load package ", sQuote("HSAUR"))
R> rm(HSAURpkg)
R> 
R> 
R> ###################################################
R> ### chunk number 2: DE-setup
R> ###################################################
R> x <- library("KernSmooth")
KernSmooth 2.22 installed
Copyright M. P. Wand 1997
R> x <- library("mclust")

Attaching package: 'mclust'


	The following object(s) are masked from package:stats :

	 density 

R> x <- library("flexmix")
R> x <- library("boot")

Attaching package: 'boot'


	The following object(s) are masked from package:lattice :

	 melanoma 

R> 
R> 
R> ###################################################
R> ### chunk number 3: DE-faithful-density
R> ###################################################
R> data("faithful", package = "datasets")
R> x <- faithful$waiting
R> layout(matrix(1:3, ncol = 3))
R> hist(x, xlab = "Waiting times (in min.)", ylab = "Frequency",
+      probability = TRUE, main = "Gaussian kernel", border = "gray")
R> lines(density(x, width = 12), lwd = 2)
R> rug(x)
R> hist(x, xlab = "Waiting times (in min.)", ylab = "Frequency",
+      probability = TRUE, main = "Rectangular kernel", border = "gray")
R> lines(density(x, width = 12, window = "rectangular"), lwd = 2)
R> rug(x)
R> hist(x, xlab = "Waiting times (in min.)", ylab = "Frequency",
+      probability = TRUE, main = "Triangular kernel", border = "gray")
R> lines(density(x, width = 12, window = "triangular"), lwd = 2)
R> rug(x)
R> 
R> 
R> ###################################################
R> ### chunk number 4: DE-CYGOB1-contour
R> ###################################################
R> library("KernSmooth")
R> data("CYGOB1", package = "HSAUR")
R> CYGOB1d <- bkde2D(CYGOB1, bandwidth = sapply(CYGOB1, dpik))
R> contour(x = CYGOB1d$x1, y = CYGOB1d$x2, z = CYGOB1d$fhat,
+         xlab = "log surface temperature", ylab = "log light intensity")
R> 
R> 
R> ###################################################
R> ### chunk number 5: DE-CYGOB1-persp
R> ###################################################
R> persp(x = CYGOB1d$x1, y = CYGOB1d$x2, z = CYGOB1d$fhat,
+       xlab = "log surface temperature", ylab = "log light intensity",
+       zlab = "estimated density", theta = -35, axes = TRUE, box = TRUE)
R> 
R> 
R> ###################################################
R> ### chunk number 6: DE-faithful-optim
R> ###################################################
R> logL <- function(param, x) {
+     d1 <- dnorm(x, mean = param[2], sd = param[3])
+     d2 <- dnorm(x, mean = param[4], sd = param[5])
+     -sum(log(param[1] * d1 + (1 - param[1]) * d2))
+ }
R> 
R> startparam <- c(p = 0.5, mu1 = 50, sd1 = 3, mu2 = 80, sd2 = 3)
R> opp <- optim(startparam, logL, x = faithful$waiting, method = "L-BFGS-B",
+              lower = c(0.01, rep(1, 4)),
+              upper = c(0.99, rep(200, 4)))
R> opp
$par
         p        mu1        sd1        mu2        sd2 
 0.3608905 54.6120933  5.8723821 80.0934226  5.8672998 

$value
[1] 1034.002

$counts
function gradient 
      55       55 

$convergence
[1] 0

$message
[1] "CONVERGENCE: REL_REDUCTION_OF_F <= FACTR*EPSMCH"

R> 
R> 
R> ###################################################
R> ### chunk number 7: DE-faithful-optim-print
R> ###################################################
R> print(opp[names(opp) != "message"])
$par
         p        mu1        sd1        mu2        sd2 
 0.3608905 54.6120933  5.8723821 80.0934226  5.8672998 

$value
[1] 1034.002

$counts
function gradient 
      55       55 

$convergence
[1] 0

R> 
R> 
R> ###################################################
R> ### chunk number 8: DE-faithful-mclust
R> ###################################################
R> library("mclust")
R> mc <- Mclust(faithful$waiting)
R> mc

 best model: equal variance with 2 groups

 averge/median classification uncertainty: 0.015 / 0 

R> 
R> 
R> ###################################################
R> ### chunk number 9: DE-faithful-mclust-mu
R> ###################################################
R> mc$mu
       1        2 
80.09624 54.62190 
R> 
R> 
R> ###################################################
R> ### chunk number 10: DE-faithful-mclust-para
R> ###################################################
R> sqrt(mc$sigmasq)
[1] 5.867345
R> 
R> 
R> ###################################################
R> ### chunk number 11: DE-faithful-flexmix
R> ###################################################
R> library("flexmix")
R> fl <- flexmix(waiting ~ 1, data = faithful, k = 2)
R> 
R> 
R> ###################################################
R> ### chunk number 12: DE-faithful-flexmix-parameters
R> ###################################################
R> parameters(fl, component = 1)
$coef
(Intercept) 
    54.6287 

$sigma
[1] 5.895234

R> parameters(fl, component = 2)
$coef
(Intercept) 
   80.09858 

$sigma
[1] 5.871749

R> 
R> 
R> ###################################################
R> ### chunk number 13: DE-faithful-2Dplot
R> ###################################################
R> opar <- as.list(opp$par)
R> rx <- seq(from = 40, to = 110, by = 0.1)
R> d1 <- dnorm(rx, mean = opar$mu1, sd = opar$sd1)
R> d2 <- dnorm(rx, mean = opar$mu2, sd = opar$sd2)
R> f <- opar$p * d1 + (1 - opar$p) * d2
R> hist(x, probability = TRUE, xlab = "Waiting times (in min.)",
+      border = "gray", xlim = range(rx), ylim = c(0, 0.06), main = "")
R> lines(rx, f, lwd = 2)
R> lines(rx, dnorm(rx, mean = mean(x), sd = sd(x)), lty = 2, lwd = 2)
R> legend(50, 0.06, legend = c("Fitted two-component mixture density",
+                             "Fitted single normal density"),
+        lty = 1:2, bty = "n")
R> 
R> 
R> ###################################################
R> ### chunk number 14: DE-faithful-boot
R> ###################################################
R> library("boot")
R> fit <- function(x, indx) {
+     a <- Mclust(x[indx], minG = 2, maxG = 2)
+     if (a$pro[1] < 0.5)
+         return(c(p = a$pro[1], mu1 = a$mu[1], mu2 = a$mu[2]))
+     return(c(p = 1 - a$pro[1], mu1 = a$mu[2], mu2 = a$mu[1]))
+ }
R> 
R> 
R> ###################################################
R> ### chunk number 15: DE-faithful-bootrun
R> ###################################################
R> bootparafile <- file.path(.find.package("HSAUR"), "cache", "DE-bootpara.rda")
R> if (file.exists(bootparafile)) {
+     load(bootparafile)
+ } else {
+     bootpara <- boot(faithful$waiting, fit, R = 1000)
+ }
R> 
R> 
R> ###################################################
R> ### chunk number 16: DE-faithful-p-ci
R> ###################################################
R> boot.ci(bootpara, type = "bca", index = 1)
BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
Based on 1000 bootstrap replicates

CALL : 
boot.ci(boot.out = bootpara, type = "bca", index = 1)

Intervals : 
Level       BCa          
95%   ( 0.3041,  0.4233 )  
Calculations and Intervals on Original Scale
R> 
R> 
R> ###################################################
R> ### chunk number 17: DE-faithful-mu1-ci
R> ###################################################
R> boot.ci(bootpara, type = "bca", index = 2)
BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
Based on 1000 bootstrap replicates

CALL : 
boot.ci(boot.out = bootpara, type = "bca", index = 2)

Intervals : 
Level       BCa          
95%   (53.42, 56.07 )  
Calculations and Intervals on Original Scale
R> 
R> 
R> ###################################################
R> ### chunk number 18: DE-faithful-mu2-ci
R> ###################################################
R> boot.ci(bootpara, type = "bca", index = 3)
BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
Based on 1000 bootstrap replicates

CALL : 
boot.ci(boot.out = bootpara, type = "bca", index = 3)

Intervals : 
Level       BCa          
95%   (79.05, 81.01 )  
Calculations and Intervals on Original Scale
R> 
R> 
R> ###################################################
R> ### chunk number 19: DE-bootplot
R> ###################################################
R> bootplot <- function(b, index, main = "") {
+     dens <- density(b$t[,index])
+     ci <- boot.ci(b, type = "bca", index = index)$bca[4:5]
+     est <- b$t0[index]
+     plot(dens, main = main)
+     y <- max(dens$y) / 10
+     segments(ci[1], y, ci[2], y, lty = 2)
+     points(ci[1], y, pch = "(")
+     points(ci[2], y, pch = ")")
+     points(est, y, pch = 19)
+ }
R> 
R> 
R> ###################################################
R> ### chunk number 20: DE-faithful-boot-plot
R> ###################################################
R> layout(matrix(1:2, ncol = 2))
R> bootplot(bootpara, 2, main = expression(mu[1]))
R> bootplot(bootpara, 3, main = expression(mu[2]))
R> 
R> 
R> 
